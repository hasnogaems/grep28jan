
Content from file: grep.c
#include <getopt.h>
#include <regex.h>
#include <stdio.h>
#include <stdlib.h>

#include "h.h"
#define no_argument 0
#define required_argument 1
#define optional_argument 2
int main(int argc, char *argv[]) {
  if (argc == 1)
    printf(
        "Usage: grep [OPTION]... PATTERNS [FILE]...\nTry 'grep --help' for "
        "more information.\n");
  else {
    FILE *fp;
    int eflags = 0;

    char *line_ = (char *)malloc(1025 * sizeof(char));
    // printf("Where?\n");
    Flags flag = parse_flags(argc, argv);  // parse flags
    int y = parse_pattern(argc, argv);     // parse pattern

    while (optind < argc) {
      if (open_file_and_i_flag(&fp, &flag, argv, &eflags) == 0) {
        optind++;
        continue;
      }

      grep(flag, fp, line_, argv, y);

      optind++;
    }
    // free(pattern);
    // free(e_ptrns);
    // fclose(fp);
    free(line_);
  }
  return 0;
}

Content from file: parse_flags.c
#include <string.h>

#include "h.h"
static struct option long_options[] = {{"number-nonblank", no_argument, 0, 'b'},
                                       {0, 0, 0, 0}};
Flags parse_flags(int argc, char **argv) {
  int c;
  Flags flag = {0};
  int option_index = 0;
  if (argc > 1) {
    while (1) {
      c = getopt_long(argc, argv, "e:ivclnhsf:o", long_options, &option_index);
      // printf("optind=%d on argv[%s]\n", optind, argv[optind]);
      if (c == -1) break;

      switch (c) {
        case 'e':
          flag.e = 1;
          add_pattern(optarg, &flag);
          break;
        case 'i':
          flag.i = 1;
          break;
        case 'v':
          flag.v = 1;
          break;
        case 'c':
          flag.c = 1;
          break;
        case 'l':
          flag.l = 1;
          break;
        case 'n':
          flag.n = 1;
          break;
        case 'h':
          flag.h = 1;
          break;
        case 's':
          flag.s = 1;
          break;
        case 'f':
          flag.f = 1;
          pattern_from_file(optarg, &flag);
          // (*e_count)++;
          break;
        case 'o':
          flag.o = 1;
          break;
      }
    }
  }

  flag.file_counter = argc - optind;
  if (!flag.e && !flag.f) {
    if (argc > optind) {
      add_pattern(argv[optind], &flag);
    }

    flag.file_counter--;
  }
  if (flag.v && flag.o) flag.o = 0;
  if (flag.e && flag.o) flag.e = 0;

  return flag;
}
int parse_pattern(int argc, char **argv) {
  int i;
  int pattern;
  for (i = 1; i < argc; i++) {
    if (argv[i][0] != '-') {
      pattern = i;
      break;
    }

    //             e_ptrns[*count]=argv[i+1];//argv не важно какой
    //             // индекс если мы читаем оттуда, не должно быть segfault?
    //            // printf("argv[%d]=%s\n", i+1, argv[i+1]);
    //             (*count)++;
    //             x=realloc(e_ptrns, *count*(1025*sizeof(char)));
    //             if(x==NULL)printf("Realloc failed");else e_ptrns=x;
    //                                 }

    //     if(argv[i][0]!='-'&&pattern_found==0/*&&strcmp(argv[i-1],
    //     "-e")!=0*/){ pattern=i;pattern_found=1;}
    //     //else if(argv[i][0]=='-')

    // }
  }
  return pattern;
}
int parse_file_amount(char **argv, int argc) {
  int i;
  int y = 0;
  FILE *fptemp;
  for (i = 1; i < argc; i++) {
    fptemp = fopen(argv[i], "r");
    if (fptemp != NULL)
      // if(i==argc-1)
      y++;
  }
  fclose(fptemp);
  // printf("File_name=%s argv index of File_name is %d\n", argv[i], i);
  return y;
}

Content from file: regex.c
#include <regex.h>
#include <stdio.h>

#include "h.h"
int regex(char pattern[], char line[], Flags flag) {
  // printf("%d", eflags);// тут лезли нули
  regex_t regex;
  int return_value =
      regcomp(&regex, pattern, REG_EXTENDED | (flag.i ? REG_ICASE : 0));
  if (return_value) {
    printf("Could not compile regular expression.\n");
  }

  return_value = regexec(&regex, line, 0, NULL, 0);
  if (!return_value) {
  } else {
    // printf("%dNo match.\n",return_value);
  }

  regfree(&regex);
  return return_value;
}

Content from file: function.c
#include "h.h"
void add_pattern(char* pattern, Flags* flag) {
  if (strlen(flag->pattern) > 0) strcat(flag->pattern, "|");
  strcat(flag->pattern, pattern);
}

int open_file_and_i_flag(FILE** fp, Flags* flag, char** argv, int* eflags) {
  // printf("in open_file argv[%d]=%s\n", optind, argv[optind]);
  (*fp) = fopen(argv[optind], "r");  // opening file
  if ((*fp) == NULL) {
    // printf("Error opening file.\n");
    return 0;  // debug
  }
  // here we store line from our file we grabbed with fgets
  if (flag->i == 1) {  // no distinction between upper and lowercase characters
    (*eflags) = REG_ICASE;
    // printf("EFLAGS IN MAIN=%d\n", eflags);
  }
  return 1;
}
/* grep_file(){

} */

void pattern_from_file(char* line_, Flags* flag) {
  FILE* pt = NULL;
  pt = fopen(optarg, "r");
  if (pt == NULL)
    printf("in function pattern_file file is not read! optarg=%s", optarg);
  if (pt != NULL) {
    // char string[1024];
    while (fgets(line_, 1024, pt) != NULL) {
      if (line_[strlen(line_) - 1] == '\n') line_[strlen(line_) - 1] = '\0';

      add_pattern(line_, flag);
    }
  } else {
    printf("s21_grep: %s: No such file or directory\n", optarg);
  }
  fclose(pt);
}

void grep(Flags flag, FILE* fp, char* line_, char** argv, int y) {
  // printf("hello?\n");
  int x = 0;
  int printl;
  int c_count = 0;
  int string_counter = 0;

  while (fgets(line_, 1024, fp)) {
    string_counter++;
    x = regex(flag.pattern, line_, flag);
    if (flag.v ? x : !x) {
      c_count++;

      // printf("%d\n", c_count); it enters here only when regex is triggered

      if (flag.l == 1 && flag.c != 1) {
        printf("%s\n", argv[optind]);
        break;
      } else if (flag.l == 1 && flag.c == 1) {
        printl = optind;
      }
      if (flag.o == 1 && flag.c != 1) {
        flag_o(line_, argv[y], flag);
        continue;
      }
      if (flag.c != 1) {
        multifileprint(&flag, argv[optind]);
        if (flag.n == 1) printf("%d:", string_counter);

        printf("%s", line_);
        if (line_[strlen(line_) - 1] != '\n')
          printf("\n");  //если строка из конца файла добавляем \n
      }
    }
  }
  if (flag.c == 1) {
    multifileprint(&flag, argv[optind]);
    printf("%d\n", (flag.l ? 1 : c_count));
  }
  if (flag.c == 1 && flag.l == 1) {
    printf("%s\n", argv[printl]);
  }
  c_count = 0;
  string_counter = 0;

  fclose(fp);
}

void multifileprint(Flags* flag, char* filename) {
  if (flag->file_counter > 1 && flag->h == 0) printf("%s:", filename);
}

void flag_e(Flags flag, FILE* fp, int* count, char* line_, char** argv) {
  // fseek(fp, 0, SEEK_SET);
  int x;
  while (fgets(line_, 1024, fp)) {  // print e patterns
    int loop_count = (*count);
    // while (loop_count > 0) {
    // printf("e_ptrns[loop_count-1]=%s\n", e_ptrns[loop_count-1]);
    x = regex(flag.pattern, line_, flag);
    loop_count--;
    // printf("X in E loop=%d\n", x);
    if (!x) {
      multifileprint(&flag, argv[optind]);
      printf("%s", line_);
    }
  }
  fclose(fp);
}

void flag_o(char* line_, char pattern[], Flags flag) {
  regex_t regex;
  regmatch_t matches[1];

  int return_value =
      regcomp(&regex, pattern, REG_EXTENDED | (flag.i ? REG_ICASE : 0));
  if (return_value) {
    printf("Could not compile regular expression.\n");
  }
  while ((regexec(&regex, line_, 1, matches, 0) == 0)) {
    printf("%.*s\n", (int)(matches[0].rm_eo - matches[0].rm_so),
           line_ + matches[0].rm_so);
    line_ += matches[0].rm_eo;
  }  //первый аргумент это длина паттерна, а второй сдвигает указатель в строке
     //чтобы от стоял на первом чаре, и потом печатает как раз длину паттерна.
}

Content from file: h.h
#ifndef HEADERS_H
#define HEADERS_H
#include <getopt.h>
#include <regex.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct Flags {
  int e;
  int i;
  int v;
  int c;
  int l;
  int n;
  int h;
  int s;
  int file;
  int o;
  int count;
  int f;
  char pattern[10000];
  int file_counter;
} Flags;

int regex(char pattern[], char line[], Flags);
int parse_pattern(int argc, char** argv);
int parse_file_amount(char** argv, int argc);
Flags parse_flags(int argc, char** argv);
int open_file_and_i_flag(FILE** fp, Flags* flag, char** argv, int* eflags);
void grep(Flags flag, FILE* fp, char* line_, char** argv, int y);
void multifileprint(Flags* flag, char* filename);
void flag_e(Flags flag, FILE* fp, int* count, char* line_, char** argv);
void flag_o(char* line_, char pattern[], Flags flag);
void pattern_from_file(char* line_, Flags* flag);
void flag_f(Flags flag, FILE* fp, int* f_count, char*** f_ptrns, int eflags,
            char* line_, char** argv, int file_amount);
void add_pattern(char* pattern, Flags* flag);
#endif
